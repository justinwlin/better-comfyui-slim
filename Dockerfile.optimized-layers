FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV IMAGEIO_FFMPEG_EXE=/usr/bin/ffmpeg
ENV FILEBROWSER_CONFIG=/workspace/madapps/.filebrowser.json
ENV UV_LINK_MODE=copy

# Layer 1: System package repositories and base tools
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    software-properties-common \
    gpg-agent \
    && add-apt-repository ppa:deadsnakes/ppa && \
    add-apt-repository ppa:cybermax-dexter/ffmpeg-nvenc && \
    apt-get update && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Layer 2: Development tools and compilers
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    git \
    make \
    golang \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Layer 3: Python 3.12
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.12 \
    python3.12-venv \
    python3.12-dev \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 && \
    update-alternatives --set python3 /usr/bin/python3.12

# Layer 4: System utilities
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    wget \
    curl \
    xz-utils \
    ca-certificates \
    gnupg \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Layer 5: Network and debugging tools
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    openssh-client \
    openssh-server \
    nano \
    htop \
    tmux \
    less \
    net-tools \
    iputils-ping \
    procps \
    rsync \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Layer 6: CUDA installation
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && \
    apt-get update && \
    apt-get install -y --no-install-recommends cuda-minimal-build-12-4 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm cuda-keyring_1.1-1_all.deb

# Layer 7: FFmpeg with NVENC
RUN apt-get update && \
    apt-get install -y --no-install-recommends ffmpeg && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Layer 8: pip and base Python packages
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.12 && \
    pip install --no-cache-dir jupyter

# Layer 9: FileBrowser installation
RUN curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash

# Layer 10: Zasper webapp installation
RUN wget https://github.com/zasper-io/zasper/releases/download/v0.1.0-alpha/zasper-webapp-linux-amd64.tar.gz && \
    tar xf zasper-webapp-linux-amd64.tar.gz -C /usr/local/bin && \
    rm zasper-webapp-linux-amd64.tar.gz

# Layer 11: SSH configuration
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config && \
    mkdir -p /run/sshd

# Set CUDA environment variables
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH:-}

# Layer 12: ComfyUI base installation
RUN mkdir -p /opt/comfyui-base && \
    cd /opt && \
    git clone https://github.com/comfyanonymous/ComfyUI.git comfyui-base/ComfyUI

# Layer 13: Python virtual environment creation
RUN cd /opt/comfyui-base/ComfyUI && \
    python3.12 -m venv .venv && \
    . .venv/bin/activate && \
    pip install -U pip && \
    pip install uv

# Layer 14: ComfyUI core dependencies
RUN cd /opt/comfyui-base/ComfyUI && \
    . .venv/bin/activate && \
    uv pip install --no-cache -r requirements.txt

# Layer 15: Common dependencies for custom nodes
RUN cd /opt/comfyui-base/ComfyUI && \
    . .venv/bin/activate && \
    uv pip install --no-cache \
    GitPython \
    numpy \
    pillow \
    opencv-python

# Layer 16: ComfyUI-Manager custom node
RUN cd /opt/comfyui-base/ComfyUI && \
    mkdir -p custom_nodes && \
    cd custom_nodes && \
    git clone https://github.com/ltdrdata/ComfyUI-Manager.git && \
    cd ComfyUI-Manager && \
    if [ -f "requirements.txt" ]; then \
        . /opt/comfyui-base/ComfyUI/.venv/bin/activate && \
        uv pip install --no-cache -r requirements.txt || true; \
    fi

# Layer 17: ComfyUI-Crystools custom node
RUN cd /opt/comfyui-base/ComfyUI/custom_nodes && \
    git clone https://github.com/crystian/ComfyUI-Crystools.git && \
    cd ComfyUI-Crystools && \
    if [ -f "requirements.txt" ]; then \
        . /opt/comfyui-base/ComfyUI/.venv/bin/activate && \
        uv pip install --no-cache -r requirements.txt || true; \
    fi

# Layer 18: ComfyUI-KJNodes custom node
RUN cd /opt/comfyui-base/ComfyUI/custom_nodes && \
    git clone https://github.com/kijai/ComfyUI-KJNodes.git && \
    cd ComfyUI-KJNodes && \
    if [ -f "requirements.txt" ]; then \
        . /opt/comfyui-base/ComfyUI/.venv/bin/activate && \
        uv pip install --no-cache -r requirements.txt || true; \
    fi

# Layer 19: Run any install.py or setup.py scripts for custom nodes
RUN cd /opt/comfyui-base/ComfyUI/custom_nodes && \
    . /opt/comfyui-base/ComfyUI/.venv/bin/activate && \
    for node_dir in */; do \
        if [ -d "$node_dir" ]; then \
            cd "/opt/comfyui-base/ComfyUI/custom_nodes/$node_dir" && \
            if [ -f "install.py" ]; then \
                python install.py || true; \
            fi && \
            if [ -f "setup.py" ]; then \
                uv pip install --no-cache -e . || true; \
            fi; \
        fi; \
    done || true

# Layer 20: Create workspace and final setup
RUN mkdir -p /workspace/madapps
WORKDIR /workspace/madapps

# Expose ports
EXPOSE 8188 22 8048 8080

# Copy optimized start script
COPY start-optimized.sh /start.sh
RUN chmod +x /start.sh

ENTRYPOINT ["/start.sh"]